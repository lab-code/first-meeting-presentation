[INCLUDE=presentation]
Title         : Coding in sciences
Sub Title     : It's fun, it's swag, it's necessary
Author        : Lukáš Hejtmánek
Email         : hejtmy@gmail.com
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Content

[TOC]
~ Begin Vertical
# Why to code
  

* To be independent of unreliable people
* To keep up with the current trends in analysis and reproducible sciences
* To learn a lifetime skill

## Reproducibility
[Nature's statment] on clearly states that future science needs to be done in reproducible manner. This requires standards in analysis procedures.

~ End Vertical

[Nature's statment]: http://www.nature.com/news/1-500-scientists-lift-the-lid-on-reproducibility-1.19970 "Nature's statment" 

~ Begin Vertical
  # Basics of programming 
  Nice article at [Code Addiction] summarises seen things that new programmers shoudl learn. This is a short summary of it.
  [Code Addiction]: http://www.codeaddiction.net/articles/43/7-things-that-new-programmers-should-learn
  ## Flow control
  Basic flow control is similar in all languages
  ``` python
    words = ['cat', 'window', 'defenestrate']
      for w in words:
        print(w, len(w))
  ```
  ``` r
    words = c('cat', 'window', 'defenestrate')
    if (words[1] == 'cat'){
      print("The array starts with a word cat")
    }
  ```
  ``` c#
    List<string> words = new List<string>(){'cat', 'window', 'defenestrate'};
    
    switchwhile(word != null){
      word = words[]
    }
  ```
  ``` matlab
    words = {'cat', 'window', 'defenestrate'}
    i = 1
    while 1
      word = words{i}
      if i >= length(x) break; end
      if strcmp(word, 'window') i = i+1; end
      display(word)
    end
  ```
## Data types
Data types are similar in many languages but each have various quirks to know about. Common data types similar to all are:
~ Begin Columns
~ Column { width:40% }

Primitive types are similar in most languages, sometimes with different names (int, str, char etc.)

* Integer
* Float
* String
* Character
* Boolean 

~
~ Column

~
~ Column { width:40% }
Structures are usually different in each language with special constrictions on initialisation. List in R is quite different from list in C#.
  

* Lists
* Array
* Dictionary
* Structure
  
~
~ End Columns
  ## Versioning
  How to effectively save and remodel your code as well as efficiently collaborate. 
  
  Using Git, SVN or Mercurial. Using web platforms such as GitHub, bitbucket etc.
  
  ## Debugging
  How to find error in your code.
  
  ## Refactoring
  How to fix/change code inside without changing its external behaviour. Good refactoring principles include:
  
* Writing tests
* Encapsulating and abstracting
  
  ## How computers work
  Having some idea of how CPU and RAM works. How web works etc.
  

* What is compilation - why windows code doesn't run on android etc.
* What happens in infinite loops
* What happens when you don't "clean up" after yourself
* What is single thread vs multi threaded program
* What is a get/post request
  
~ End Vertical

~ Begin Vertical 
  
  ## Programming languages
  There are several interesting coding languages relevant to scientific programming. But the key is, that knowing one well 
  will make you understand the reset much easier. 
  
  ## R
  ```r
   read_table <- function(path){
    if(is.char(path)){
      return read.table(path, sep = ";", header = T)
    } else {
      print(paste("path is type ", class(path), ", shoud be string", sep = "", collapse = ""))
    }
   } 
  ```
  Good: Amazing community, variety of packages, dynamically typed, prepared for data analysis (data.frame)
  
  Bad: Sometimes weird syntax, no code standards, no official OOP support, needs 3rd party software to be user friendly
  
  ## Python
  ```python
    import numpy as np
    import pandas as pd
    def read_table(path):
      if type(path) is str:
        return pd.read_csv(path, sep = ";", header = True)
      else:
        print("path is type " + type(o) + ", shoudl be string");
  ```   
  Good: Simple to learn, dynamically typed, vast use everywhere - Youtube, Machine learning(Tensor flow)), Scipy, Numpy packages make it par with R, supports OOP 
  Jupyter notebooks are awesome
   
  Bad: Still missing the vast community support, not too many packages 
  
  ## Matlab
  
  ```matlab
    function table = readtable(path)
    end  
  ```
  
  Good: Fast matrix wise computations, lot of functionality in box (graphing, simulations), SPM, Fieldtrip, EEGLAB
  
  Bad: Proprietary and expensive as hell, RAM expensive, stupid standards
  
~ End Vertical

## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)
